%% Define data

% label = 'neurons';
label = 'boutons';

if strcmp(label, 'neurons')
    % % Neurons in sSC
    exampleSet = 7; % SS047, 2015-11-23, 1
    examples = [1 168; 1 207]; %; 2 71];
    % OLD:
    % exampleSet = 10; % SS048, 2015-12-02, 1
    % examples = [1 105; 2 6; 1 37; 1 44]; % [plane, cellID]
else
    % % Boutons in sSC
    exampleSet = 4; % SS069, 2016-10-21, 1
    examples = [1 5; 1 120; 1 164];
end

% file location depending on PCs
folderPC = 'C:\STORAGE\OneDrive - University College London';
% folderPC = 'C:\Users\skgtchr\OneDrive - University College London'; % ZEN notebook
% folderPC = 'C:\Storage\OneDrive - University College London'; % Lenovo laptop
% data folders
folderROIData = fullfile(folderPC, 'Lab\DATA\InfoStructs');
if strcmp(label, 'neurons')
    folderResults = fullfile(folderPC, 'Lab\RESULTS\nonvisualEffects\modelGratingResp');
    
    corrections = [];
else
    folderResults = fullfile(folderPC, 'Lab\RESULTS\boutons\nonvisualEffects');
    
    data = load(fullfile(folderROIData, 'corrections_boutons.mat'));
    corrections = data.corrections;
    doCorrect = data.doCorrect;
end

data = load(fullfile(folderResults, 'pupil', ...
    'tuning_prefDirSigmaDIFixed_lineFit.mat'));
tuning = data.tuning;
degrees = data.x;

data = load(fullfile(folderResults, 'kernelFit', 'results.mat'));
results = data.results;

expField = 'exp';
if ~isfield(results,expField)
    expField = 'expGratings';
end

%% Collect variables from visual noise
file = 'receptiveFields.mat';
data = load(fullfile(folderRFResults, file));
RFs = data.RFs;

datasets = [];
planes = [];
neurons = [];
evStim = [];
lambdasStim = [];
pValues = [];
OnOffValues = [];

for k = 1:length(RFs)
    for iPlane = 1:length(RFs(k).plane)
        n = length(RFs(k).plane(iPlane).explainedVariances);
        datasets = [datasets; ones(n,1).*k];
        planes = [planes; ones(n,1).*iPlane];
        neurons = [neurons; (1:n)'];
        evStim = [evStim; RFs(k).plane(iPlane).explainedVariances_stimOnly];
        lambdasStim = [lambdasStim; RFs(k).plane(iPlane).lambdasStim'];
        pValues = [pValues; RFs(k).plane(iPlane).pVal_RFonly];
        
        oov = NaN(n,2);
        for iCell = 1:n
            rf = RFs(k).plane(iPlane).receptiveFields(:,:,:,:,iCell);
            [~,t] = max(max(reshape(permute(abs(rf),[1 2 4 3]), [], ...
                size(rf,3)), [], 1));
            rf = squeeze(rf(:,:,t,:));
            [mx,row] = max(max(abs(rf),[],3),[],1);
            [~,col] = max(mx);
            row = row(col);
            rf = squeeze(rf(row,col,:));
            rf(2) = -rf(2);
            oov(iCell,:) = rf;
        end
        OnOffValues = [OnOffValues; oov];
    end
end

%% Collect variables of tuning curves
leg = {'data','null distribution'};

data = load(fullfile(folderResults, 'pupil', ...
    'nullTuning_prefDirSigmaDIFixed.mat'));
null = data.null;

prefDirs = [];
responses = cell(1, length(tuning));

maxis = []; % resp to pref stimulus
stimMeans = [];
exIndices = NaN(size(examples,1),1);
isSuppr = [];
isGad = [];
dataset = [];
draws = cellfun(@size,squeeze(struct2cell(null(1).plane(1).cond(1).cell)),'UniformOutput',false);
draws = max(cell2mat(draws),[],1);
draws = draws(1);
for iExp = 1:length(tuning)
    fprintf('Dataset %d: %s %s exp.: %d\n', iExp, tuning(iExp).subject, ...
        tuning(iExp).date, tuning(iExp).exp);
    respD = [];
    for iPlane = 1:length(tuning(iExp).plane)
        data = tuning(iExp).plane(iPlane);
        if isempty(data.cellIDs)
            continue
        end
        neurons = find(~cellfun(@isempty, {data.cond(1).cell.parameters}));
        
        for j = 1:length(neurons)
            iCell = neurons(j);
            prefDir = NaN;
            resp = NaN(1,12,size(data.cond(1).cell(iCell).responses,2),2);
            means = NaN(1,2);
            prefs = NaN(1,2);
            for c = 1:2
                resp(1,:,:,c) = data.cond(c).cell(iCell).responses;
                
                pars = data.cond(c).cell(iCell).parameters;
                curve = data.cond(c).cell(iCell).curve;
                if length(pars) == 1 % not tuned
                    means(c) = pars;
                else
                    prefDir = pars(1);
                    means(c) = mean(curve);
                    oris = mod(pars(1) + [0 90 180], 360);
                    sr = gratings.orituneWrappedConditions(pars, oris);
                    prefs(c) = sr(1);
                end
            end
            
            if ~isempty(corrections)
                a = corrections(iExp).plane(iPlane).a{tuning(iExp).exp} ...
                    (data.cellIDs(iCell));
                b = corrections(iExp).plane(iPlane).b{tuning(iExp).exp} ...
                    (data.cellIDs(iCell));
                resp = doCorrect(a,b,resp);
                prefs = doCorrect(a,b,prefs);
                means = doCorrect(a,b,means);
            end
            
            prefDirs(end+1,1) = prefDir;
            respD(end+1,:,:,:) = resp;
            
            maxis(end+1,:) = prefs;
            stimMeans(end+1,:) = means;
            if exampleSet == iExp
                ex = find(ismember(examples(:,1),iPlane) & ...
                    ismember(examples(:,2),iCell));
                if ~isempty(ex)
                    exIndices(ex) = size(minis,1);
                end
            end
            
            isSuppr(end+1,:) = data.isSuppressed(iCell);
            if isfield(data, 'isGad')
                isGad(end+1,:) = data.isGad(iCell);
            end
        end
        dataset = [dataset; ones(length(neurons),1).*iExp; neurons'];
        responses{iExp} = respD;
    end
end

%% Plot maximum (vs minimum) to differentiate suppressed-by-contrast from
% enhanced-by-contrast neurons
labels = {'small pupil','large pupil'};
isTuned = ~any(isnan(maxis),2);
for c = 1 % small pupil (2: large pupil)
    if isempty(isGad)
        types = 1;
        cellTypes = {'all'};
%         cols = [0 0 0];
        bs = 10;
        xLim = [9 10];
        yLim = [3 6];
        zLim = NaN;
    else
        types = [-1 0 1];
        cellTypes = {'exc.','NK','inh.'};
%         cols = [lines(2); 0 0 0];
%         cols = cols([2 3 1],:);
        bs = 1;
        xLim = [4 4];
        yLim = [3 6];
        zLim = 10.46;
    end
    for ty = 1:length(types)
        if isempty(isGad)
            ind = true(size(stimMeans,1),1);
        else
            ind = isGad == types(ty);
        end
    
        mi = minis(:,c);
        ma = maxis(:,c);
        j = isnan(mi);
        mi(j) = stimMeans(j,c);
        ma(j) = stimMeans(j,c);
        j = ma - mi < 0;
        m = mi(j);
        mi(j) = ma(j);
        ma(j) = m;
        b_mi = [-flip(2.^(-3:xLim(1))), 0, 2.^(-3:xLim(2))];
        b_ma = [-flip(2.^(-3:yLim(1))), 0, 2.^(-3:yLim(2))];
        
        figure
        N1 = histcounts(ma(ind&isTuned), b_ma);
        N2 = histcounts(ma(ind&~isTuned), b_ma);
        [~,~,b_ex] = histcounts(ma(exIndices), b_ma);
        b = bar(1.5:length(b_ma), [N1',N2'], 'stacked');
        b(1).FaceColor = 'k';
        b(2).FaceColor = 'w';
        hold on
        for ex = 1:length(exIndices)
            plot(b_ex(ex)+0.5,10,'v','Color',cols(ex,:))
        end
        xlabel('Maximum')
        ylabel(['#' label])
        title(sprintf('%s - %s (n = %d)', cellTypes{ty}, labels{c},sum(ind)))
        set(gca,'XTick',1:length(b_ma),'XTickLabel',b_ma,'box','off')
        legend(b,{'tuned','not tuned'},'Location','NorthWest')
    end
end

%% Plot histogram of preferred directions
binSize = 100;

pd = prefDirs;
pd(isnan(pd)) = [];
n = length(pd);
pd = sort(pd);
pd = [pd(end-binSize:end)-360; pd; pd(1:binSize)+360];
rngs = [pd(1:end-binSize+1), pd(binSize:end)];
y = binSize/n ./ diff(rngs,1,2);
x = mean(rngs, 2);

figure
plot(x, y, 'k', 'LineWidth', 1)
xlim([0 360])
set(gca, 'XTick', 0:90:360, 'box', 'off')
xlabel('Preferred direction (deg)')
ylabel('Probability density')
title(sprintf('%s (n=%d)', label, sum(~isnan(prefDirs))))

%% Plot histgrams and scatter of OSIs and DSIs
cond = 1; % small or large pupil
shuffles = 1000;
dirVectors = exp((0:30:330)./180.*pi .* 1i);
oriVectors = exp((0:30:330)./180.*2.*pi .* 1i);

meanResp = [];
shuffleResp = [];
for k = 1:length(responses)
    r = responses{k}(:,:,:,cond);
    meanResp = [meanResp; nanmean(r, 3)];
    r1 = reshape(r, size(r,1), []);
    shR = NaN(size(r,1),length(dirVectors),shuffles);
    for sh = 1:shuffles
        p = randperm(size(r1,2));
        r2 = reshape(r1(:,p), size(r));
        shR(:,:,sh) = nanmean(r2, 3);
    end
    shuffleResp = [shuffleResp; shR];
end

meanResp(isSuppr==1,:) = -meanResp(isSuppr==1,:);
shuffleResp(isSuppr==1,:,:) = -shuffleResp(isSuppr==1,:,:);
meanResp(meanResp<0) = 0;
shuffleResp(shuffleResp<0) = 0;
meanResp = meanResp ./ max(meanResp,[],2);
shuffleResp = shuffleResp ./ max(shuffleResp,[],2);

% Determine DSIs
vects = mean(dirVectors .* meanResp, 2);
shuffleVects = squeeze(mean(dirVectors .* shuffleResp, 2));
DSIs = abs(vects);
nullDSIs = abs(shuffleVects);
nullDSIs = sort(nullDSIs, 2);
p_DSI = sum(nullDSIs > DSIs,2) ./ shuffles;

% Determine OSIs
vects = mean(oriVectors .* meanResp, 2);
shuffleVects = squeeze(mean(oriVectors .* shuffleResp, 2));
OSIs = abs(vects);
nullOSIs = abs(shuffleVects);
nullOSIs = sort(nullDSIs, 2);
p_OSI = sum(nullOSIs > OSIs,2) ./ shuffles;

% Determine pref directions
vects = mean(dirVectors .* meanResp, 2);
prefDirs_vectAvg = mod(angle(vects) ./ pi .* 180, 360);

% Plot histograms of DSIs and OSIs
binSize = 0.01;
mx = ceil(max([DSIs; OSIs]) / binSize) * binSize;
edges = 0:binSize:mx;
bins = edges(1:end-1) + binSize/2;
N1 = histcounts(DSIs(p_DSI < 0.05), edges);
N2 = histcounts(DSIs(p_DSI >= 0.05), edges);
figure
b = bar(bins, [N1; N2], 'stacked');
b(1).FaceColor = 'k';
b(2).FaceColor = 'w';
xlim([0 mx])
set(gca, 'box','off','XTick',0:.1:mx)
xlabel('DSI')
ylabel(sprintf('#%s',label))
title(sprintf('DSI (n=%d)', sum(~isnan(DSIs))))
N1 = histcounts(OSIs(p_OSI < 0.05), edges);
N2 = histcounts(OSIs(p_OSI >= 0.05), edges);
figure
b = bar(bins, [N1; N2], 'stacked');
b(1).FaceColor = 'k';
b(2).FaceColor = 'w';
xlim([0 mx])
set(gca, 'box','off','XTick',0:.1:mx)
xlabel('OSI')
ylabel(sprintf('#%s',label))
title(sprintf('OSI (n=%d)', sum(~isnan(DSIs))))

% Plot scatter of DSI versus OSI
colors = [1 0 0; 0 0 1; .5 0 .5];
inds = [p_DSI<.05&p_OSI>=.05, p_DSI>=.05&p_OSI<.05, p_DSI<.05&p_OSI<.05, ...
    p_DSI>=.05&p_OSI>=.05];
figure
hold on
scatter(DSIs(inds(:,4)), OSIs(inds(:,4)), 'k')
for k = 1:3
    scatter(DSIs(inds(:,k)), OSIs(inds(:,k)), [], colors(k,:), 'filled')
end
legend('none','dir-sel','ori-sel','dir&ori')
axis square
axis([0 mx 0 mx])
set(gca, 'box','off','XTick',0:.1:mx,'YTick',0:.1:mx)
xlabel('DSI')
ylabel('OSI')
title(sprintf('%s (n=%d)', label, sum(~any(isnan([DSIs OSIs]),2))))

% Plot preferred directions
figure
histogram(prefDirs_vectAvg, 0:10:360, 'FaceColor', 'k')
set(gca, 'box', 'off', 'XTick', 0:90:360)
xlim([0 360])
xlabel('Preferred direction')
ylabel(sprintf('#%s',label))
title(sprintf('Preferred directions (n=%d)', sum(~isnan(prefDirs_vectAvg))))